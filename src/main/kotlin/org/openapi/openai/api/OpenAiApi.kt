/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapi.openai.api

import io.swagger.v3.oas.annotations.Operation
import io.swagger.v3.oas.annotations.Parameter
import io.swagger.v3.oas.annotations.enums.ParameterIn
import io.swagger.v3.oas.annotations.media.Content
import io.swagger.v3.oas.annotations.media.Schema
import io.swagger.v3.oas.annotations.responses.ApiResponse
import io.swagger.v3.oas.annotations.tags.Tag
import jakarta.annotation.Generated
import jakarta.validation.Valid
import org.openapi.openai.model.*
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity
import org.springframework.http.codec.multipart.Part
import org.springframework.validation.annotation.Validated
import org.springframework.web.bind.annotation.*
import org.springframework.web.server.ServerWebExchange
import reactor.core.publisher.Flux
import reactor.core.publisher.Mono

@Generated(
    value = ["org.openapitools.codegen.languages.SpringCodegen"],
    date = "2023-02-15T20:47:29.471771-08:00[America/Vancouver]"
)
@Validated
@Tag(name = "OpenAi", description = "The OpenAI REST API")
interface OpenAiApi {
    /**
     * POST /fine-tunes/{fine_tune_id}/cancel : Immediately cancel a fine-tune job.
     *
     * @param fineTuneId The ID of the fine-tune job to cancel  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "cancelFineTune",
        summary = "Immediately cancel a fine-tune job. ",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(mediaType = "application/json", schema = Schema(implementation = FineTune::class))]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/fine-tunes/{fine_tune_id}/cancel"],
        produces = ["application/json"]
    )
    fun cancelFineTune(
        @Parameter(
            name = "fine_tune_id",
            description = "The ID of the fine-tune job to cancel ",
            required = true,
            `in` = ParameterIn.PATH
        ) @PathVariable("fine_tune_id") fineTuneId: String?,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<FineTune>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"result_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"hyperparams\" : \"{}\", \"fine_tuned_model\" : \"fine_tuned_model\", \"created_at\" : 0, \"training_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"updated_at\" : 6, \"organization_id\" : \"organization_id\", \"model\" : \"model\", \"id\" : \"id\", \"events\" : [ { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" }, { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" } ], \"object\" : \"object\", \"status\" : \"status\", \"validation_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ] }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }

    /**
     * POST /answers : Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).
     *
     * @param createAnswerRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createAnswer",
        summary = "Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions). ",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(
                mediaType = "application/json",
                schema = Schema(implementation = CreateAnswerResponse::class)
            )]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/answers"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    @Deprecated("")
    fun createAnswer(
        @Parameter(
            name = "CreateAnswerRequest",
            description = "",
            required = true
        ) @RequestBody createAnswerRequest: @Valid Mono<CreateAnswerRequest>,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<CreateAnswerResponse>> {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"completion\" : \"completion\", \"selected_documents\" : [ { \"document\" : 0, \"text\" : \"text\" }, { \"document\" : 0, \"text\" : \"text\" } ], \"search_model\" : \"search_model\", \"answers\" : [ \"answers\", \"answers\" ], \"model\" : \"model\", \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(createAnswerRequest).then(Mono.empty())
    }

    /**
     * POST /classifications : Classifies the specified &#x60;query&#x60; using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded &#x60;file&#x60;, or explicitly listed in the request using the &#x60;examples&#x60; parameter for quick tests and small scale use cases.
     *
     * @param createClassificationRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createClassification",
        summary = "Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases. ",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(
                mediaType = "application/json",
                schema = Schema(implementation = CreateClassificationResponse::class)
            )]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/classifications"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    @Deprecated("")
    fun createClassification(
        @Parameter(
            name = "CreateClassificationRequest",
            description = "",
            required = true
        ) @RequestBody createClassificationRequest: @Valid Mono<CreateClassificationRequest>,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<CreateClassificationResponse>> {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"completion\" : \"completion\", \"search_model\" : \"search_model\", \"selected_examples\" : [ { \"document\" : 0, \"text\" : \"text\", \"label\" : \"label\" }, { \"document\" : 0, \"text\" : \"text\", \"label\" : \"label\" } ], \"model\" : \"model\", \"label\" : \"label\", \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(createClassificationRequest).then(Mono.empty())
    }

    /**
     * POST /completions : Creates a completion for the provided prompt and parameters
     *
     * @param createCompletionRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createCompletion",
        summary = "Creates a completion for the provided prompt and parameters",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(
                mediaType = "application/json",
                schema = Schema(implementation = CreateCompletionResponse::class)
            )]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/completions"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun createCompletion(
        @Parameter(
            name = "CreateCompletionRequest",
            description = "",
            required = true
        ) @RequestBody createCompletionRequest: @Valid Mono<CreateCompletionRequest>,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<CreateCompletionResponse>> {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"created\" : 0, \"usage\" : { \"completion_tokens\" : 2, \"prompt_tokens\" : 5, \"total_tokens\" : 7 }, \"model\" : \"model\", \"id\" : \"id\", \"choices\" : [ { \"finish_reason\" : \"finish_reason\", \"index\" : 6, \"text\" : \"text\", \"logprobs\" : { \"top_logprobs\" : [ \"{}\", \"{}\" ], \"token_logprobs\" : [ 1.4658129805029452, 1.4658129805029452 ], \"tokens\" : [ \"tokens\", \"tokens\" ], \"text_offset\" : [ 5, 5 ] } }, { \"finish_reason\" : \"finish_reason\", \"index\" : 6, \"text\" : \"text\", \"logprobs\" : { \"top_logprobs\" : [ \"{}\", \"{}\" ], \"token_logprobs\" : [ 1.4658129805029452, 1.4658129805029452 ], \"tokens\" : [ \"tokens\", \"tokens\" ], \"text_offset\" : [ 5, 5 ] } } ], \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(createCompletionRequest).then(Mono.empty())
    }

    /**
     * POST /edits : Creates a new edit for the provided input, instruction, and parameters
     *
     * @param createEditRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createEdit",
        summary = "Creates a new edit for the provided input, instruction, and parameters",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(
                mediaType = "application/json",
                schema = Schema(implementation = CreateEditResponse::class)
            )]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/edits"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun createEdit(
        @Parameter(
            name = "CreateEditRequest",
            description = "",
            required = true
        ) @RequestBody createEditRequest: @Valid Mono<CreateEditRequest>,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<CreateEditResponse>> {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"created\" : 0, \"usage\" : { \"completion_tokens\" : 2, \"prompt_tokens\" : 5, \"total_tokens\" : 7 }, \"model\" : \"model\", \"id\" : \"id\", \"choices\" : [ { \"finish_reason\" : \"finish_reason\", \"index\" : 6, \"text\" : \"text\", \"logprobs\" : { \"top_logprobs\" : [ \"{}\", \"{}\" ], \"token_logprobs\" : [ 1.4658129805029452, 1.4658129805029452 ], \"tokens\" : [ \"tokens\", \"tokens\" ], \"text_offset\" : [ 5, 5 ] } }, { \"finish_reason\" : \"finish_reason\", \"index\" : 6, \"text\" : \"text\", \"logprobs\" : { \"top_logprobs\" : [ \"{}\", \"{}\" ], \"token_logprobs\" : [ 1.4658129805029452, 1.4658129805029452 ], \"tokens\" : [ \"tokens\", \"tokens\" ], \"text_offset\" : [ 5, 5 ] } } ], \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(createEditRequest).then(Mono.empty())
    }

    /**
     * POST /embeddings : Creates an embedding vector representing the input text.
     *
     * @param createEmbeddingRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createEmbedding",
        summary = "Creates an embedding vector representing the input text.",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(
                mediaType = "application/json",
                schema = Schema(implementation = CreateEmbeddingResponse::class)
            )]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/embeddings"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun createEmbedding(
        @Parameter(
            name = "CreateEmbeddingRequest",
            description = "",
            required = true
        ) @RequestBody createEmbeddingRequest: @Valid Mono<CreateEmbeddingRequest>,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<CreateEmbeddingResponse>> {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"data\" : [ { \"index\" : 0, \"embedding\" : [ 6.027456183070403, 6.027456183070403 ], \"object\" : \"object\" }, { \"index\" : 0, \"embedding\" : [ 6.027456183070403, 6.027456183070403 ], \"object\" : \"object\" } ], \"usage\" : { \"prompt_tokens\" : 1, \"total_tokens\" : 5 }, \"model\" : \"model\", \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(createEmbeddingRequest).then(Mono.empty())
    }

    /**
     * POST /files : Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.
     *
     * @param file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\&quot;fine-tune\\\&quot;, each line is a JSON record with \\\&quot;prompt\\\&quot; and \\\&quot;completion\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).  (required)
     * @param purpose The intended purpose of the uploaded documents.  Use \\\&quot;fine-tune\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createFile",
        summary = "Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit. ",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(mediaType = "application/json", schema = Schema(implementation = OpenAIFile::class))]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/files"],
        produces = ["application/json"],
        consumes = ["multipart/form-data"]
    )
    fun createFile(
        @Parameter(
            name = "file",
            description = "Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the `purpose` is set to \\\"fine-tune\\\", each line is a JSON record with \\\"prompt\\\" and \\\"completion\\\" fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data). ",
            required = true
        ) @RequestPart(value = "file", required = true) file: Flux<Part?>?,
        @Parameter(
            name = "purpose",
            description = "The intended purpose of the uploaded documents.  Use \\\"fine-tune\\\" for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file. ",
            required = true
        ) @RequestParam(value = "purpose", required = true) purpose: @Valid String?,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<OpenAIFile>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }

    /**
     * POST /fine-tunes : Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)
     *
     * @param createFineTuneRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createFineTune",
        summary = "Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) ",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(mediaType = "application/json", schema = Schema(implementation = FineTune::class))]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/fine-tunes"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun createFineTune(
        @Parameter(
            name = "CreateFineTuneRequest",
            description = "",
            required = true
        ) @RequestBody createFineTuneRequest: @Valid Mono<CreateFineTuneRequest>,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<FineTune>> {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"result_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"hyperparams\" : \"{}\", \"fine_tuned_model\" : \"fine_tuned_model\", \"created_at\" : 0, \"training_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"updated_at\" : 6, \"organization_id\" : \"organization_id\", \"model\" : \"model\", \"id\" : \"id\", \"events\" : [ { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" }, { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" } ], \"object\" : \"object\", \"status\" : \"status\", \"validation_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ] }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(createFineTuneRequest).then(Mono.empty())
    }

    /**
     * POST /images/generations : Creates an image given a prompt.
     *
     * @param createImageRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createImage",
        summary = "Creates an image given a prompt.",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(mediaType = "application/json", schema = Schema(implementation = ImagesResponse::class))]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/images/generations"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun createImage(
        @Parameter(
            name = "CreateImageRequest",
            description = "",
            required = true
        ) @RequestBody createImageRequest: @Valid Mono<CreateImageRequest>,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<ImagesResponse>> {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"data\" : [ { \"b64_json\" : \"b64_json\", \"url\" : \"url\" }, { \"b64_json\" : \"b64_json\", \"url\" : \"url\" } ], \"created\" : 0 }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(createImageRequest).then(Mono.empty())
    }

    /**
     * POST /images/edits : Creates an edited or extended image given an original image and a prompt.
     *
     * @param image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask. (required)
     * @param prompt A text description of the desired image(s). The maximum length is 1000 characters. (required)
     * @param mask An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as &#x60;image&#x60;. (optional)
     * @param n The number of images to generate. Must be between 1 and 10. (optional, default to 1)
     * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to 1024x1024)
     * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (optional, default to url)
     * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createImageEdit",
        summary = "Creates an edited or extended image given an original image and a prompt.",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(mediaType = "application/json", schema = Schema(implementation = ImagesResponse::class))]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/images/edits"],
        produces = ["application/json"],
        consumes = ["multipart/form-data"]
    )
    fun createImageEdit(
        @Parameter(
            name = "image",
            description = "The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is not provided, image must have transparency, which will be used as the mask.",
            required = true
        ) @RequestPart(value = "image", required = true) image: Flux<Part?>?,
        @Parameter(
            name = "prompt",
            description = "A text description of the desired image(s). The maximum length is 1000 characters.",
            required = true
        ) @RequestParam(value = "prompt", required = true) prompt: @Valid String?,
        @Parameter(
            name = "mask",
            description = "An additional image whose fully transparent areas (e.g. where alpha is zero) indicate where `image` should be edited. Must be a valid PNG file, less than 4MB, and have the same dimensions as `image`."
        ) @RequestPart(value = "mask", required = false) mask: Flux<Part?>?,
        @Parameter(
            name = "n",
            description = "The number of images to generate. Must be between 1 and 10."
        ) @RequestParam(value = "n", required = false) n: @Valid Int?,
        @Parameter(
            name = "size",
            description = "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`."
        ) @RequestParam(value = "size", required = false) size: @Valid String?,
        @Parameter(
            name = "response_format",
            description = "The format in which the generated images are returned. Must be one of `url` or `b64_json`."
        ) @RequestParam(value = "response_format", required = false) responseFormat: @Valid String?,
        @Parameter(
            name = "user",
            description = "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). "
        ) @RequestParam(value = "user", required = false) user: @Valid String?,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<ImagesResponse>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"data\" : [ { \"b64_json\" : \"b64_json\", \"url\" : \"url\" }, { \"b64_json\" : \"b64_json\", \"url\" : \"url\" } ], \"created\" : 0 }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }

    /**
     * POST /images/variations : Creates a variation of a given image.
     *
     * @param image The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square. (required)
     * @param n The number of images to generate. Must be between 1 and 10. (optional, default to 1)
     * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;, &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to 1024x1024)
     * @param responseFormat The format in which the generated images are returned. Must be one of &#x60;url&#x60; or &#x60;b64_json&#x60;. (optional, default to url)
     * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createImageVariation",
        summary = "Creates a variation of a given image.",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(mediaType = "application/json", schema = Schema(implementation = ImagesResponse::class))]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/images/variations"],
        produces = ["application/json"],
        consumes = ["multipart/form-data"]
    )
    fun createImageVariation(
        @Parameter(
            name = "image",
            description = "The image to use as the basis for the variation(s). Must be a valid PNG file, less than 4MB, and square.",
            required = true
        ) @RequestPart(value = "image", required = true) image: Flux<Part?>?,
        @Parameter(
            name = "n",
            description = "The number of images to generate. Must be between 1 and 10."
        ) @RequestParam(value = "n", required = false) n: @Valid Int?,
        @Parameter(
            name = "size",
            description = "The size of the generated images. Must be one of `256x256`, `512x512`, or `1024x1024`."
        ) @RequestParam(value = "size", required = false) size: @Valid String?,
        @Parameter(
            name = "response_format",
            description = "The format in which the generated images are returned. Must be one of `url` or `b64_json`."
        ) @RequestParam(value = "response_format", required = false) responseFormat: @Valid String?,
        @Parameter(
            name = "user",
            description = "A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). "
        ) @RequestParam(value = "user", required = false) user: @Valid String?,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<ImagesResponse>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"data\" : [ { \"b64_json\" : \"b64_json\", \"url\" : \"url\" }, { \"b64_json\" : \"b64_json\", \"url\" : \"url\" } ], \"created\" : 0 }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }

    /**
     * POST /moderations : Classifies if text violates OpenAI&#39;s Content Policy
     *
     * @param createModerationRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createModeration",
        summary = "Classifies if text violates OpenAI's Content Policy",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(
                mediaType = "application/json",
                schema = Schema(implementation = CreateModerationResponse::class)
            )]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/moderations"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    fun createModeration(
        @Parameter(
            name = "CreateModerationRequest",
            description = "",
            required = true
        ) @RequestBody createModerationRequest: @Valid Mono<CreateModerationRequest>,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<CreateModerationResponse>> {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"model\" : \"model\", \"id\" : \"id\", \"results\" : [ { \"category_scores\" : { \"hate/threatening\" : 6.027456183070403, \"sexual/minors\" : 5.637376656633329, \"hate\" : 0.8008281904610115, \"self-harm\" : 1.4658129805029452, \"sexual\" : 5.962133916683182, \"violence/graphic\" : 7.061401241503109, \"violence\" : 2.3021358869347655 }, \"flagged\" : true, \"categories\" : { \"hate/threatening\" : true, \"sexual/minors\" : true, \"hate\" : true, \"self-harm\" : true, \"sexual\" : true, \"violence/graphic\" : true, \"violence\" : true } }, { \"category_scores\" : { \"hate/threatening\" : 6.027456183070403, \"sexual/minors\" : 5.637376656633329, \"hate\" : 0.8008281904610115, \"self-harm\" : 1.4658129805029452, \"sexual\" : 5.962133916683182, \"violence/graphic\" : 7.061401241503109, \"violence\" : 2.3021358869347655 }, \"flagged\" : true, \"categories\" : { \"hate/threatening\" : true, \"sexual/minors\" : true, \"hate\" : true, \"self-harm\" : true, \"sexual\" : true, \"violence/graphic\" : true, \"violence\" : true } } ] }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(createModerationRequest).then(Mono.empty())
    }

    /**
     * POST /engines/{engine_id}/search : The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When &#x60;file&#x60; is set, the search endpoint searches over all the documents in the given file and returns up to the &#x60;max_rerank&#x60; number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.
     *
     * @param engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;. (required)
     * @param createSearchRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createSearch",
        summary = "The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query. ",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(
                mediaType = "application/json",
                schema = Schema(implementation = CreateSearchResponse::class)
            )]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.POST],
        value = ["/engines/{engine_id}/search"],
        produces = ["application/json"],
        consumes = ["application/json"]
    )
    @Deprecated("")
    fun createSearch(
        @Parameter(
            name = "engine_id",
            description = "The ID of the engine to use for this request.  You can select one of `ada`, `babbage`, `curie`, or `davinci`.",
            required = true,
            `in` = ParameterIn.PATH
        ) @PathVariable("engine_id") engineId: String?,
        @Parameter(
            name = "CreateSearchRequest",
            description = "",
            required = true
        ) @RequestBody createSearchRequest: @Valid Mono<CreateSearchRequest>,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<CreateSearchResponse>> {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"data\" : [ { \"score\" : 6.027456183070403, \"document\" : 0, \"object\" : \"object\" }, { \"score\" : 6.027456183070403, \"document\" : 0, \"object\" : \"object\" } ], \"model\" : \"model\", \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(createSearchRequest).then(Mono.empty())
    }

    /**
     * DELETE /files/{file_id} : Delete a file.
     *
     * @param fileId The ID of the file to use for this request (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteFile",
        summary = "Delete a file.",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(
                mediaType = "application/json",
                schema = Schema(implementation = DeleteFileResponse::class)
            )]
        )]
    )
    @RequestMapping(method = [RequestMethod.DELETE], value = ["/files/{file_id}"], produces = ["application/json"])
    fun deleteFile(
        @Parameter(
            name = "file_id",
            description = "The ID of the file to use for this request",
            required = true,
            `in` = ParameterIn.PATH
        ) @PathVariable("file_id") fileId: String?,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<DeleteFileResponse>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString = "{ \"deleted\" : true, \"id\" : \"id\", \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }

    /**
     * DELETE /models/{model} : Delete a fine-tuned model. You must have the Owner role in your organization.
     *
     * @param model The model to delete (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteModel",
        summary = "Delete a fine-tuned model. You must have the Owner role in your organization.",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(
                mediaType = "application/json",
                schema = Schema(implementation = DeleteModelResponse::class)
            )]
        )]
    )
    @RequestMapping(method = [RequestMethod.DELETE], value = ["/models/{model}"], produces = ["application/json"])
    fun deleteModel(
        @Parameter(
            name = "model",
            description = "The model to delete",
            required = true,
            `in` = ParameterIn.PATH
        ) @PathVariable("model") model: String?,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<DeleteModelResponse>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString = "{ \"deleted\" : true, \"id\" : \"id\", \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }

    /**
     * GET /files/{file_id}/content : Returns the contents of the specified file
     *
     * @param fileId The ID of the file to use for this request (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "downloadFile",
        summary = "Returns the contents of the specified file",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(mediaType = "application/json", schema = Schema(implementation = String::class))]
        )]
    )
    @RequestMapping(method = [RequestMethod.GET], value = ["/files/{file_id}/content"], produces = ["application/json"])
    fun downloadFile(
        @Parameter(
            name = "file_id",
            description = "The ID of the file to use for this request",
            required = true,
            `in` = ParameterIn.PATH
        ) @PathVariable("file_id") fileId: String?,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<String>>? {
        val result = Mono.empty<Void>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        return result.then(Mono.empty())
    }

    /**
     * GET /engines : Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listEngines",
        summary = "Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(
                mediaType = "application/json",
                schema = Schema(implementation = ListEnginesResponse::class)
            )]
        )]
    )
    @RequestMapping(method = [RequestMethod.GET], value = ["/engines"], produces = ["application/json"])
    @Deprecated("")
    fun listEngines(
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<ListEnginesResponse>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"data\" : [ { \"created\" : 0, \"ready\" : true, \"id\" : \"id\", \"object\" : \"object\" }, { \"created\" : 0, \"ready\" : true, \"id\" : \"id\", \"object\" : \"object\" } ], \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }

    /**
     * GET /files : Returns a list of files that belong to the user&#39;s organization.
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listFiles",
        summary = "Returns a list of files that belong to the user's organization.",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(
                mediaType = "application/json",
                schema = Schema(implementation = ListFilesResponse::class)
            )]
        )]
    )
    @RequestMapping(method = [RequestMethod.GET], value = ["/files"], produces = ["application/json"])
    fun listFiles(
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<ListFilesResponse>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"data\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }

    /**
     * GET /fine-tunes/{fine_tune_id}/events : Get fine-grained status updates for a fine-tune job.
     *
     * @param fineTuneId The ID of the fine-tune job to get events for.  (required)
     * @param stream Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.  (optional, default to false)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listFineTuneEvents",
        summary = "Get fine-grained status updates for a fine-tune job. ",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(
                mediaType = "application/json",
                schema = Schema(implementation = ListFineTuneEventsResponse::class)
            )]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/fine-tunes/{fine_tune_id}/events"],
        produces = ["application/json"]
    )
    fun listFineTuneEvents(
        @Parameter(
            name = "fine_tune_id",
            description = "The ID of the fine-tune job to get events for. ",
            required = true,
            `in` = ParameterIn.PATH
        ) @PathVariable("fine_tune_id") fineTuneId: String?,
        @Parameter(
            name = "stream",
            description = "Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a `data: [DONE]` message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned. ",
            `in` = ParameterIn.QUERY
        ) @RequestParam(value = "stream", required = false, defaultValue = "false") stream: @Valid Boolean?,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<ListFineTuneEventsResponse>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"data\" : [ { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" }, { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" } ], \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }

    /**
     * GET /fine-tunes : List your organization&#39;s fine-tuning jobs
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listFineTunes",
        summary = "List your organization's fine-tuning jobs ",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(
                mediaType = "application/json",
                schema = Schema(implementation = ListFineTunesResponse::class)
            )]
        )]
    )
    @RequestMapping(method = [RequestMethod.GET], value = ["/fine-tunes"], produces = ["application/json"])
    fun listFineTunes(
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<ListFineTunesResponse>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"data\" : [ { \"result_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"hyperparams\" : \"{}\", \"fine_tuned_model\" : \"fine_tuned_model\", \"created_at\" : 0, \"training_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"updated_at\" : 6, \"organization_id\" : \"organization_id\", \"model\" : \"model\", \"id\" : \"id\", \"events\" : [ { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" }, { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" } ], \"object\" : \"object\", \"status\" : \"status\", \"validation_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ] }, { \"result_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"hyperparams\" : \"{}\", \"fine_tuned_model\" : \"fine_tuned_model\", \"created_at\" : 0, \"training_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"updated_at\" : 6, \"organization_id\" : \"organization_id\", \"model\" : \"model\", \"id\" : \"id\", \"events\" : [ { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" }, { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" } ], \"object\" : \"object\", \"status\" : \"status\", \"validation_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ] } ], \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }

    /**
     * GET /models : Lists the currently available models, and provides basic information about each one such as the owner and availability.
     *
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "listModels",
        summary = "Lists the currently available models, and provides basic information about each one such as the owner and availability.",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(
                mediaType = "application/json",
                schema = Schema(implementation = ListModelsResponse::class)
            )]
        )]
    )
    @RequestMapping(method = [RequestMethod.GET], value = ["/models"], produces = ["application/json"])
    fun listModels(
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<ListModelsResponse>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"data\" : [ { \"created\" : 0, \"owned_by\" : \"owned_by\", \"id\" : \"id\", \"object\" : \"object\" }, { \"created\" : 0, \"owned_by\" : \"owned_by\", \"id\" : \"id\", \"object\" : \"object\" } ], \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }

    /**
     * GET /engines/{engine_id} : Retrieves a model instance, providing basic information about it such as the owner and availability.
     *
     * @param engineId The ID of the engine to use for this request  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "retrieveEngine",
        summary = "Retrieves a model instance, providing basic information about it such as the owner and availability.",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(mediaType = "application/json", schema = Schema(implementation = Engine::class))]
        )]
    )
    @RequestMapping(method = [RequestMethod.GET], value = ["/engines/{engine_id}"], produces = ["application/json"])
    @Deprecated("")
    fun retrieveEngine(
        @Parameter(
            name = "engine_id",
            description = "The ID of the engine to use for this request ",
            required = true,
            `in` = ParameterIn.PATH
        ) @PathVariable("engine_id") engineId: String?,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<Engine>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString = "{ \"created\" : 0, \"ready\" : true, \"id\" : \"id\", \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }

    /**
     * GET /files/{file_id} : Returns information about a specific file.
     *
     * @param fileId The ID of the file to use for this request (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "retrieveFile",
        summary = "Returns information about a specific file.",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(mediaType = "application/json", schema = Schema(implementation = OpenAIFile::class))]
        )]
    )
    @RequestMapping(method = [RequestMethod.GET], value = ["/files/{file_id}"], produces = ["application/json"])
    fun retrieveFile(
        @Parameter(
            name = "file_id",
            description = "The ID of the file to use for this request",
            required = true,
            `in` = ParameterIn.PATH
        ) @PathVariable("file_id") fileId: String?,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<OpenAIFile>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }

    /**
     * GET /fine-tunes/{fine_tune_id} : Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)
     *
     * @param fineTuneId The ID of the fine-tune job  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "retrieveFineTune",
        summary = "Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning) ",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(mediaType = "application/json", schema = Schema(implementation = FineTune::class))]
        )]
    )
    @RequestMapping(
        method = [RequestMethod.GET],
        value = ["/fine-tunes/{fine_tune_id}"],
        produces = ["application/json"]
    )
    fun retrieveFineTune(
        @Parameter(
            name = "fine_tune_id",
            description = "The ID of the fine-tune job ",
            required = true,
            `in` = ParameterIn.PATH
        ) @PathVariable("fine_tune_id") fineTuneId: String?,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<FineTune>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"result_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"hyperparams\" : \"{}\", \"fine_tuned_model\" : \"fine_tuned_model\", \"created_at\" : 0, \"training_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ], \"updated_at\" : 6, \"organization_id\" : \"organization_id\", \"model\" : \"model\", \"id\" : \"id\", \"events\" : [ { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" }, { \"level\" : \"level\", \"created_at\" : 1, \"message\" : \"message\", \"object\" : \"object\" } ], \"object\" : \"object\", \"status\" : \"status\", \"validation_files\" : [ { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" }, { \"filename\" : \"filename\", \"purpose\" : \"purpose\", \"bytes\" : 0, \"created_at\" : 6, \"id\" : \"id\", \"status_details\" : \"{}\", \"object\" : \"object\", \"status\" : \"status\" } ] }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }

    /**
     * GET /models/{model} : Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
     *
     * @param model The ID of the model to use for this request (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "retrieveModel",
        summary = "Retrieves a model instance, providing basic information about the model such as the owner and permissioning.",
        tags = ["OpenAI"],
        responses = [ApiResponse(
            responseCode = "200",
            description = "OK",
            content = [Content(mediaType = "application/json", schema = Schema(implementation = Model::class))]
        )]
    )
    @RequestMapping(method = [RequestMethod.GET], value = ["/models/{model}"], produces = ["application/json"])
    fun retrieveModel(
        @Parameter(
            name = "model",
            description = "The ID of the model to use for this request",
            required = true,
            `in` = ParameterIn.PATH
        ) @PathVariable("model") model: String?,
        @Parameter(hidden = true) exchange: ServerWebExchange
    ): Mono<ResponseEntity<Model>>? {
        var result = Mono.empty<Void?>()
        exchange.response.statusCode = HttpStatus.NOT_IMPLEMENTED
        for (mediaType in exchange.request.headers.accept) {
            if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                val exampleString =
                    "{ \"created\" : 0, \"owned_by\" : \"owned_by\", \"id\" : \"id\", \"object\" : \"object\" }"
                result = org.openapi.openai.api.ApiUtil.getExampleResponse(exchange, mediaType, exampleString)
                break
            }
        }
        return result.then(Mono.empty())
    }
}